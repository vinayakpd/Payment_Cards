{"ast":null,"code":"import _slicedToArray from \"D:\\\\Kalpas_Doodle\\\\react-interactive-paycard-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Kalpas_Doodle\\\\react-interactive-paycard-master\\\\src\\\\screens\\\\MainScreen\\\\components\\\\card\\\\index.js\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup, SwitchTransition } from 'react-transition-group';\nimport './styles.scss';\nconst CARDS = {\n  visa: '^4',\n  amex: '^(34|37)',\n  mastercard: '^5[1-5]',\n  discover: '^6011',\n  unionpay: '^62',\n  troy: '^9792',\n  diners: '^(30[0-5]|36)'\n};\n\nconst Card = ({\n  cardHolder,\n  cardNumber,\n  cardMonth,\n  cardYear,\n  cardCvv,\n  isCardFlipped,\n  currentFocusedElm,\n  onCardElementClick,\n  cardNumberRef,\n  cardHolderRef,\n  cardDateRef\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        style = _useState2[0],\n        setStyle = _useState2[1];\n\n  const cardType = cardNumber => {\n    const number = cardNumber;\n    let re;\n\n    for (const _ref of Object.entries(CARDS)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const card = _ref2[0];\n      const pattern = _ref2[1];\n      re = new RegExp(pattern);\n\n      if (number.match(re) != null) {\n        return card;\n      }\n    }\n\n    return 'visa'; // default type\n  };\n\n  const useCardType = useMemo(() => {\n    return cardType(cardNumber);\n  }, [cardNumber]);\n\n  const outlineElementStyle = element => {\n    return element ? {\n      width: \"\".concat(element.offsetWidth, \"px\"),\n      height: \"\".concat(element.offsetHeight, \"px\"),\n      transform: \"translateX(\".concat(element.offsetLeft, \"px) translateY(\").concat(element.offsetTop, \"px)\")\n    } : null;\n  };\n\n  useEffect(() => {\n    if (currentFocusedElm) {\n      const style = outlineElementStyle(currentFocusedElm.current);\n      setStyle(style);\n    }\n  }, [currentFocusedElm]);\n\n  const maskCardNumber = cardNumber => {\n    let cardNumberArr = cardNumber.split('');\n    cardNumberArr.forEach((val, index) => {\n      if (index > 4 && index < 14) {\n        if (cardNumberArr[index] !== ' ') {\n          cardNumberArr[index] = '*';\n        }\n      }\n    });\n    return cardNumberArr;\n  };\n\n  return React.createElement(\"div\", {\n    className: 'card-item ' + (isCardFlipped ? '-active' : ''),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__side -front\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__focus \".concat(currentFocusedElm ? \"-active\" : \"\"),\n    style: style,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"card-item__wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: '/chip.png',\n    alt: \"\",\n    className: \"card-item__chip\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"card-item__type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    alt: useCardType,\n    src: \"/card-type/\".concat(useCardType, \".png\"),\n    className: \"card-item__typeImg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }))), React.createElement(\"label\", {\n    className: \"card-item__number\",\n    ref: cardNumberRef,\n    onClick: () => onCardElementClick('cardNumber'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, React.createElement(TransitionGroup, {\n    className: \"slide-fade-up\",\n    component: \"div\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, cardNumber ? maskCardNumber(cardNumber).map((val, index) => React.createElement(CSSTransition, {\n    classNames: \"slide-fade-up\",\n    timeout: 250,\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__numberItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, val))) : React.createElement(CSSTransition, {\n    classNames: \"slide-fade-up\",\n    timeout: 250,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__numberItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, \"#\")))), React.createElement(\"div\", {\n    className: \"card-item__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"card-item__info\",\n    onClick: () => onCardElementClick('cardHolder'),\n    ref: cardHolderRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__holder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Card Holder\"), React.createElement(\"div\", {\n    className: \"card-item__name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(TransitionGroup, {\n    component: \"div\",\n    className: \"slide-fade-up\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, cardHolder === 'FULL NAME' ? React.createElement(CSSTransition, {\n    classNames: \"slide-fade-up\",\n    timeout: 250,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"FULL NAME\")) : cardHolder.split('').map((val, index) => React.createElement(CSSTransition, {\n    timeout: 250,\n    classNames: \"slide-fade-right\",\n    key: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"card-item__nameItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, val)))))), React.createElement(\"div\", {\n    className: \"card-item__date\",\n    onClick: () => onCardElementClick('cardDate'),\n    ref: cardDateRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"card-item__dateTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Expires\"), React.createElement(\"label\", {\n    className: \"card-item__dateItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(SwitchTransition, {\n    \"in-out\": true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(CSSTransition, {\n    classNames: \"slide-fade-up\",\n    timeout: 200,\n    key: cardMonth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, !cardMonth ? 'MM' : cardMonth, ' ')))), \"/\", React.createElement(\"label\", {\n    htmlFor: \"cardYear\",\n    className: \"card-item__dateItem\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, React.createElement(SwitchTransition, {\n    \"out-in\": true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(CSSTransition, {\n    classNames: \"slide-fade-up\",\n    timeout: 250,\n    key: cardYear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, !cardYear ? 'YY' : cardYear.toString().substr(-2))))))))), React.createElement(\"div\", {\n    className: \"card-item__side -back\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__cover\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    alt: \"\",\n    src: \"/card-background/\".concat(BACKGROUND_IMG),\n    className: \"card-item__bg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"card-item__band\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"card-item__cvv\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-item__cvvTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, \"CVV\"), React.createElement(\"div\", {\n    className: \"card-item__cvvBand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  }, React.createElement(TransitionGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }, cardCvv.split('').map((val, index) => React.createElement(CSSTransition, {\n    classNames: \"zoom-in-out\",\n    key: index,\n    timeout: 250,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  }, \"*\"))))), React.createElement(\"div\", {\n    className: \"card-item__type\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    alt: \"card-type\",\n    src: '/card-type/visa.png',\n    className: \"card-item__typeImg\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  })))));\n};\n\nexport default Card;","map":{"version":3,"sources":["D:/Kalpas_Doodle/react-interactive-paycard-master/src/screens/MainScreen/components/card/index.js"],"names":["React","useState","useEffect","useCallback","useMemo","CSSTransition","TransitionGroup","SwitchTransition","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","Card","cardHolder","cardNumber","cardMonth","cardYear","cardCvv","isCardFlipped","currentFocusedElm","onCardElementClick","cardNumberRef","cardHolderRef","cardDateRef","style","setStyle","cardType","number","re","Object","entries","card","pattern","RegExp","match","useCardType","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","current","maskCardNumber","cardNumberArr","split","forEach","val","index","map","toString","substr","BACKGROUND_IMG"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792',\n    diners: '^(30[0-5]|36)'\n};\n\n\nconst Card = ({\n    cardHolder,\n    cardNumber,\n    cardMonth,\n    cardYear,\n    cardCvv,\n    isCardFlipped,\n    currentFocusedElm,\n    onCardElementClick,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef\n}) => {\n    const [style, setStyle] = useState(null);\n\n    const cardType = (cardNumber) => {\n        const number = cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa'; // default type\n    };\n\n    const useCardType = useMemo(() => {\n        return cardType(cardNumber);\n    }, [cardNumber]);\n\n    const outlineElementStyle = (element) => {\n        return element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n    };\n\n    useEffect(() => {\n        if (currentFocusedElm) {\n            const style = outlineElementStyle(currentFocusedElm.current);\n            setStyle(style);\n        }\n    }, [currentFocusedElm]);\n\n    const maskCardNumber = (cardNumber) => {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    };\n\n    return (\n        <div className={'card-item ' + (isCardFlipped ? '-active' : '')}>\n            <div className=\"card-item__side -front\">\n                <div\n                    className={`card-item__focus ${\n                        currentFocusedElm ? `-active` : ``\n                    }`}\n                    style={style}\n                />\n               \n\n                <div className=\"card-item__wrapper\">\n                    <div className=\"card-item__top\">\n                        <img\n                            src={'/chip.png'}\n                            alt=\"\"\n                            className=\"card-item__chip\"\n                        />\n                        <div className=\"card-item__type\">\n                            <img\n                                alt={useCardType}\n                                src={`/card-type/${useCardType}.png`}\n                                className=\"card-item__typeImg\"\n                            />\n                        </div>\n                    </div>\n\n                    <label\n                        className=\"card-item__number\"\n                        ref={cardNumberRef}\n                        onClick={() => onCardElementClick('cardNumber')}\n                    >\n                        <TransitionGroup\n                            className=\"slide-fade-up\"\n                            component=\"div\"\n                        >\n                            {cardNumber ? (\n                                maskCardNumber(cardNumber).map((val, index) => (\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={index}\n                                    >\n                                        <div className=\"card-item__numberItem\">\n                                            {val}\n                                        </div>\n                                    </CSSTransition>\n                                ))\n                            ) : (\n                                <CSSTransition\n                                    classNames=\"slide-fade-up\"\n                                    timeout={250}\n                                >\n                                    <div className=\"card-item__numberItem\">\n                                        #\n                                    </div>\n                                </CSSTransition>\n                            )}\n                        </TransitionGroup>\n                    </label>\n                    <div className=\"card-item__content\">\n                        <label\n                            className=\"card-item__info\"\n                            onClick={() => onCardElementClick('cardHolder')}\n                            ref={cardHolderRef}\n                        >\n                            <div className=\"card-item__holder\">Card Holder</div>\n                            <div className=\"card-item__name\">\n                                <TransitionGroup\n                                    component=\"div\"\n                                    className=\"slide-fade-up\"\n                                >\n                                    {cardHolder === 'FULL NAME' ? (\n                                        <CSSTransition\n                                            classNames=\"slide-fade-up\"\n                                            timeout={250}\n                                        >\n                                            <div>FULL NAME</div>\n                                        </CSSTransition>\n                                    ) : (\n                                        cardHolder\n                                            .split('')\n                                            .map((val, index) => (\n                                                <CSSTransition\n                                                    timeout={250}\n                                                    classNames=\"slide-fade-right\"\n                                                    key={index}\n                                                >\n                                                    <span className=\"card-item__nameItem\">\n                                                        {val}\n                                                    </span>\n                                                </CSSTransition>\n                                            ))\n                                    )}\n                                </TransitionGroup>\n                            </div>\n                        </label>\n                        <div\n                            className=\"card-item__date\"\n                            onClick={() => onCardElementClick('cardDate')}\n                            ref={cardDateRef}\n                        >\n                            <label className=\"card-item__dateTitle\">\n                                Expires\n                            </label>\n                            <label className=\"card-item__dateItem\">\n                                <SwitchTransition in-out>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={200}\n                                        key={cardMonth}\n                                    >\n                                        <span>\n                                            {!cardMonth ? 'MM' : cardMonth}{' '}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                            /\n                            <label\n                                htmlFor=\"cardYear\"\n                                className=\"card-item__dateItem\"\n                            >\n                                <SwitchTransition out-in>\n                                    <CSSTransition\n                                        classNames=\"slide-fade-up\"\n                                        timeout={250}\n                                        key={cardYear}\n                                    >\n                                        <span>\n                                            {!cardYear\n                                                ? 'YY'\n                                                : cardYear\n                                                      .toString()\n                                                      .substr(-2)}\n                                        </span>\n                                    </CSSTransition>\n                                </SwitchTransition>\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div className=\"card-item__side -back\">\n                <div className=\"card-item__cover\">\n                    <img\n                        alt=\"\"\n                        src={`/card-background/${BACKGROUND_IMG}`}\n                        className=\"card-item__bg\"\n                    />\n                </div>\n                <div className=\"card-item__band\" />\n                <div className=\"card-item__cvv\">\n                    <div className=\"card-item__cvvTitle\">CVV</div>\n                    <div className=\"card-item__cvvBand\">\n                        <TransitionGroup>\n                            {cardCvv.split('').map((val, index) => (\n                                <CSSTransition\n                                    classNames=\"zoom-in-out\"\n                                    key={index}\n                                    timeout={250}\n                                >\n                                    <span>*</span>\n                                </CSSTransition>\n                            ))}\n                        </TransitionGroup>\n                    </div>\n                    <div className=\"card-item__type\">\n                        <img\n                            alt=\"card-type\"\n                            src={'/card-type/visa.png'}\n                            className=\"card-item__typeImg\"\n                        />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}