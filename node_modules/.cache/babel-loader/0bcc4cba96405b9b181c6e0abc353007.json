{"ast":null,"code":"import _slicedToArray from \"D:\\\\Kalpas_Doodle\\\\react-interactive-paycard-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { CSSTransition, TransitionGroup, SwitchTransition } from 'react-transition-group';\nimport './styles.scss';\nconst CARDS = {\n  visa: '^4',\n  amex: '^(34|37)',\n  mastercard: '^5[1-5]',\n  discover: '^6011',\n  unionpay: '^62',\n  troy: '^9792',\n  diners: '^(30[0-5]|36)'\n};\n\nconst Card = ({\n  cardHolder,\n  cardNumber,\n  cardMonth,\n  cardYear,\n  cardCvv,\n  isCardFlipped,\n  currentFocusedElm,\n  onCardElementClick,\n  cardNumberRef,\n  cardHolderRef,\n  cardDateRef\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        style = _useState2[0],\n        setStyle = _useState2[1];\n\n  const cardType = cardNumber => {\n    const number = cardNumber;\n    let re;\n\n    for (const _ref of Object.entries(CARDS)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const card = _ref2[0];\n      const pattern = _ref2[1];\n      re = new RegExp(pattern);\n\n      if (number.match(re) != null) {\n        return card;\n      }\n    }\n\n    return 'visa'; // default type\n  };\n\n  const useCardType = useMemo(() => {\n    return cardType(cardNumber);\n  }, [cardNumber]);\n\n  const outlineElementStyle = element => {\n    return element ? {\n      width: \"\".concat(element.offsetWidth, \"px\"),\n      height: \"\".concat(element.offsetHeight, \"px\"),\n      transform: \"translateX(\".concat(element.offsetLeft, \"px) translateY(\").concat(element.offsetTop, \"px)\")\n    } : null;\n  };\n\n  useEffect(() => {\n    if (currentFocusedElm) {\n      const style = outlineElementStyle(currentFocusedElm.current);\n      setStyle(style);\n    }\n  }, [currentFocusedElm]);\n\n  const maskCardNumber = cardNumber => {\n    let cardNumberArr = cardNumber.split('');\n    cardNumberArr.forEach((val, index) => {\n      if (index > 4 && index < 14) {\n        if (cardNumberArr[index] !== ' ') {\n          cardNumberArr[index] = '*';\n        }\n      }\n    });\n    return cardNumberArr;\n  };\n};\n\nexport default Card;","map":{"version":3,"sources":["D:/Kalpas_Doodle/react-interactive-paycard-master/src/screens/MainScreen/components/card/index.js"],"names":["React","useState","useEffect","useCallback","useMemo","CSSTransition","TransitionGroup","SwitchTransition","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","Card","cardHolder","cardNumber","cardMonth","cardYear","cardCvv","isCardFlipped","currentFocusedElm","onCardElementClick","cardNumberRef","cardHolderRef","cardDateRef","style","setStyle","cardType","number","re","Object","entries","card","pattern","RegExp","match","useCardType","outlineElementStyle","element","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","current","maskCardNumber","cardNumberArr","split","forEach","val","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,EAAkDC,OAAlD,QAAiE,OAAjE;AACA,SACIC,aADJ,EAEIC,eAFJ,EAGIC,gBAHJ,QAIO,wBAJP;AAKA,OAAO,eAAP;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,IAAI,EAAE,IADI;AAEVC,EAAAA,IAAI,EAAE,UAFI;AAGVC,EAAAA,UAAU,EAAE,SAHF;AAIVC,EAAAA,QAAQ,EAAE,OAJA;AAKVC,EAAAA,QAAQ,EAAE,KALA;AAMVC,EAAAA,IAAI,EAAE,OANI;AAOVC,EAAAA,MAAM,EAAE;AAPE,CAAd;;AAWA,MAAMC,IAAI,GAAG,CAAC;AACVC,EAAAA,UADU;AAEVC,EAAAA,UAFU;AAGVC,EAAAA,SAHU;AAIVC,EAAAA,QAJU;AAKVC,EAAAA,OALU;AAMVC,EAAAA,aANU;AAOVC,EAAAA,iBAPU;AAQVC,EAAAA,kBARU;AASVC,EAAAA,aATU;AAUVC,EAAAA,aAVU;AAWVC,EAAAA;AAXU,CAAD,KAYP;AAAA,oBACwB1B,QAAQ,CAAC,IAAD,CADhC;AAAA;AAAA,QACK2B,KADL;AAAA,QACYC,QADZ;;AAGF,QAAMC,QAAQ,GAAIZ,UAAD,IAAgB;AAC7B,UAAMa,MAAM,GAAGb,UAAf;AACA,QAAIc,EAAJ;;AACA,uBAA8BC,MAAM,CAACC,OAAP,CAAe1B,KAAf,CAA9B,EAAqD;AAAA;;AAAA,YAAzC2B,IAAyC;AAAA,YAAnCC,OAAmC;AACjDJ,MAAAA,EAAE,GAAG,IAAIK,MAAJ,CAAWD,OAAX,CAAL;;AACA,UAAIL,MAAM,CAACO,KAAP,CAAaN,EAAb,KAAoB,IAAxB,EAA8B;AAC1B,eAAOG,IAAP;AACH;AACJ;;AAED,WAAO,MAAP,CAV6B,CAUd;AAClB,GAXD;;AAaA,QAAMI,WAAW,GAAGnC,OAAO,CAAC,MAAM;AAC9B,WAAO0B,QAAQ,CAACZ,UAAD,CAAf;AACH,GAF0B,EAExB,CAACA,UAAD,CAFwB,CAA3B;;AAIA,QAAMsB,mBAAmB,GAAIC,OAAD,IAAa;AACrC,WAAOA,OAAO,GACR;AACIC,MAAAA,KAAK,YAAKD,OAAO,CAACE,WAAb,OADT;AAEIC,MAAAA,MAAM,YAAKH,OAAO,CAACI,YAAb,OAFV;AAGIC,MAAAA,SAAS,uBAAgBL,OAAO,CAACM,UAAxB,4BAAoDN,OAAO,CAACO,SAA5D;AAHb,KADQ,GAMR,IANN;AAOH,GARD;;AAUA9C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqB,iBAAJ,EAAuB;AACnB,YAAMK,KAAK,GAAGY,mBAAmB,CAACjB,iBAAiB,CAAC0B,OAAnB,CAAjC;AACApB,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH;AACJ,GALQ,EAKN,CAACL,iBAAD,CALM,CAAT;;AAOA,QAAM2B,cAAc,GAAIhC,UAAD,IAAgB;AACnC,QAAIiC,aAAa,GAAGjC,UAAU,CAACkC,KAAX,CAAiB,EAAjB,CAApB;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAsB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAIA,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,EAAzB,EAA6B;AACzB,YAAIJ,aAAa,CAACI,KAAD,CAAb,KAAyB,GAA7B,EAAkC;AAC9BJ,UAAAA,aAAa,CAACI,KAAD,CAAb,GAAuB,GAAvB;AACH;AACJ;AACJ,KAND;AAQA,WAAOJ,aAAP;AACH,GAXD;AAcH,CA/DD;;AAiEA,eAAenC,IAAf","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport {\n    CSSTransition,\n    TransitionGroup,\n    SwitchTransition\n} from 'react-transition-group';\nimport './styles.scss';\n\nconst CARDS = {\n    visa: '^4',\n    amex: '^(34|37)',\n    mastercard: '^5[1-5]',\n    discover: '^6011',\n    unionpay: '^62',\n    troy: '^9792',\n    diners: '^(30[0-5]|36)'\n};\n\n\nconst Card = ({\n    cardHolder,\n    cardNumber,\n    cardMonth,\n    cardYear,\n    cardCvv,\n    isCardFlipped,\n    currentFocusedElm,\n    onCardElementClick,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef\n}) => {\n    const [style, setStyle] = useState(null);\n\n    const cardType = (cardNumber) => {\n        const number = cardNumber;\n        let re;\n        for (const [card, pattern] of Object.entries(CARDS)) {\n            re = new RegExp(pattern);\n            if (number.match(re) != null) {\n                return card;\n            }\n        }\n\n        return 'visa'; // default type\n    };\n\n    const useCardType = useMemo(() => {\n        return cardType(cardNumber);\n    }, [cardNumber]);\n\n    const outlineElementStyle = (element) => {\n        return element\n            ? {\n                  width: `${element.offsetWidth}px`,\n                  height: `${element.offsetHeight}px`,\n                  transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n              }\n            : null;\n    };\n\n    useEffect(() => {\n        if (currentFocusedElm) {\n            const style = outlineElementStyle(currentFocusedElm.current);\n            setStyle(style);\n        }\n    }, [currentFocusedElm]);\n\n    const maskCardNumber = (cardNumber) => {\n        let cardNumberArr = cardNumber.split('');\n        cardNumberArr.forEach((val, index) => {\n            if (index > 4 && index < 14) {\n                if (cardNumberArr[index] !== ' ') {\n                    cardNumberArr[index] = '*';\n                }\n            }\n        });\n\n        return cardNumberArr;\n    };\n\n   \n};\n\nexport default Card;\n"]},"metadata":{},"sourceType":"module"}